{"version":3,"file":"static/js/11.3f266ce0.chunk.js","mappings":"8SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qDAchBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,mBACiCM,EADjC,2BADO,cACxBH,EADwB,yBAIvBA,EAASC,KAAKG,SAJS,2CAAH,sDAOhBC,EAAc,mCAAG,WAAMC,GAAN,uFACLP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,oBACcT,EADd,oBADK,cACtBG,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdM,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,EAD3B,oBADA,cACjBG,EADiB,yBAKhBA,EAASC,KAAKQ,MALE,2CAAH,sDAQTC,EAAU,mCAAG,WAAMF,GAAN,uFACDT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,EAD3B,2BADC,cAClBG,EADkB,yBAKjBA,EAASC,KAAKG,SALG,2CAAH,qD,mHCvCR,SAASO,EAAT,GAA+B,IAATF,EAAQ,EAARA,KACnC,OACE,wBACGA,GACCA,EAAKG,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACP,2BACE,gBACEC,IACEF,GAAY,6CAC0BA,GAExCG,IAAKJ,EACLK,OAAO,SAET,wBAAKL,KACL,uCAAeE,OAVRT,EADF,KAgBhB,CCjBc,SAASa,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOX,EAAP,KAAaY,EAAb,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,QAQR,OANAe,EAAAA,EAAAA,YAAU,YACRhB,EAAAA,EAAAA,IAAUC,GACPgB,MAAK,SAAAvB,GAAI,OAAIoB,EAAQpB,EAAZ,IACTwB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAAClB,KAEG,SAACG,EAAD,CAAYF,KAAMA,GAC1B,C","sources":["Services/serviceAPI.js","components/CastMarkup.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '96c6c10d81401dc0172065706a628eea';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&&query=${query}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n","import PropTypes from 'prop-types';\n\nexport default function CastMarkup({ cast }) {\n  return (\n    <ul>\n      {cast &&\n        cast.map(({ id, name, profile_path, character }) => (\n          <li key={id}>\n            <img\n              src={\n                profile_path &&\n                `https://image.tmdb.org/t/p/original${profile_path}`\n              }\n              alt={name}\n              height=\"300\"\n            />\n            <h2>{name}</h2>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nCastMarkup.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getActors } from '../Services/serviceAPI';\nimport CastMarkup from 'components/CastMarkup';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getActors(movieId)\n      .then(data => setCast(data))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return <CastMarkup cast={cast} />;\n}\n"],"names":["BASE_URL","API_KEY","getTrendingMovie","axios","response","data","getMovieBySearch","query","results","getDetailsById","id","getActors","movieId","cast","getReviews","CastMarkup","map","name","profile_path","character","src","alt","height","Cast","useState","setCast","useParams","useEffect","then","catch","error","console","log"],"sourceRoot":""}