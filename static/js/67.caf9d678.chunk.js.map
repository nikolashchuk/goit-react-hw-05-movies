{"version":3,"file":"static/js/67.caf9d678.chunk.js","mappings":"8SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qDAchBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,mBACiCM,EADjC,2BADO,cACxBH,EADwB,yBAIvBA,EAASC,KAAKG,SAJS,2CAAH,sDAOhBC,EAAc,mCAAG,WAAMC,GAAN,uFACLP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,oBACcT,EADd,oBADK,cACtBG,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdM,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,EAD3B,oBADA,cACjBG,EADiB,yBAKhBA,EAASC,KAAKQ,MALE,2CAAH,sDAQTC,EAAU,mCAAG,WAAMF,GAAN,uFACDT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,EAD3B,2BADC,cAClBG,EADkB,yBAKjBA,EAASC,KAAKG,SALG,2CAAH,qD,oFCtCR,SAASO,EAAT,GAA2B,IAAXC,EAAU,EAAVA,OACvBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,GACCA,EAAOG,KAAI,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,eAA3B,OACT,yBACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMP,GAAYQ,GAAE,kBAAaf,GAAhD,WACE,gBACEgB,IAAG,6CAAwCL,GAC3CM,IAAKL,EACLM,MAAM,GACNC,OAAO,SAGT,wBAAKT,QATAV,EADA,KAgBlB,C,kHCxBc,SAASoB,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OACE,kBAAMA,SAAUA,EAAhB,WACE,4BACE,kBACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,KAAK,cAGT,mBAAQJ,KAAK,SAAb,UACE,+CAIP,C,aCXc,SAASK,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOtB,EAAP,KAAeuB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAASF,EAAaG,IAAI,WAEhCC,EAAAA,EAAAA,YAAU,WACR,GAAe,KAAXF,EACF,OAAOG,MAAM,mBAGfxC,EAAAA,EAAAA,IAAiBqC,GACdI,KAAKR,GACLS,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACN,IAUJ,OACE,iCACE,SAACb,EAAD,CAAWC,SAVE,SAAAqB,GACfA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cACnBb,EAAgB,CAAEC,OAAQW,EAAKE,SAASb,OAAOc,QAC/CH,EAAKI,OACN,IAKIf,IAAU,SAAC5B,EAAA,EAAD,CAAMC,OAAQA,MAG9B,C","sources":["Services/serviceAPI.js","components/List.jsx","components/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '96c6c10d81401dc0172065706a628eea';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&&query=${query}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport default function List({ movies }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies &&\n        movies.map(({ id, title, poster_path, original_title }) => (\n          <li key={id}>\n            <Link state={{ from: location }} to={`/movies/${id}`}>\n              <img\n                src={`https://image.tmdb.org/t/p/original${poster_path}`}\n                alt={original_title}\n                width=\"\"\n                height=\"300\"\n              />\n\n              <h3>{title}</h3>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export default function Searchbar({ onSubmit }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          name=\"search\"\n        />\n      </label>\n      <button type=\"submit\">\n        <span>üîç</span>\n      </button>\n    </form>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieBySearch } from '../Services/serviceAPI';\nimport Searchbar from 'components/Searchbar';\nimport List from 'components/List';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n\n  useEffect(() => {\n    if (search === '') {\n      return alert('input any data');\n    }\n\n    getMovieBySearch(search)\n      .then(setMovies)\n      .catch(error => console.log(error));\n  }, [search]);\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    setSearchParams({ search: form.elements.search.value });\n    form.reset();\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onSubmit} />\n      {search && <List movies={movies} />}\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","getTrendingMovie","axios","response","data","getMovieBySearch","query","results","getDetailsById","id","getActors","movieId","cast","getReviews","List","movies","location","useLocation","map","title","poster_path","original_title","state","from","to","src","alt","width","height","Searchbar","onSubmit","type","autoComplete","autoFocus","placeholder","name","Movies","useState","setMovies","useSearchParams","searchParams","setSearchParams","search","get","useEffect","alert","then","catch","error","console","log","event","preventDefault","form","currentTarget","elements","value","reset"],"sourceRoot":""}