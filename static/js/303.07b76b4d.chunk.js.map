{"version":3,"file":"static/js/303.07b76b4d.chunk.js","mappings":"+SAEMA,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,cACxBG,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,qDAchBC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,mBACiCM,EADjC,2BADO,cACxBH,EADwB,yBAIvBA,EAASC,KAAKG,SAJS,2CAAH,sDAOhBC,EAAc,mCAAG,WAAMC,GAAN,uFACLP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,oBACcT,EADd,oBADK,cACtBG,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdM,EAAS,mCAAG,WAAMC,GAAN,uFACAT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,EAD3B,oBADA,cACjBG,EADiB,yBAKhBA,EAASC,KAAKQ,MALE,2CAAH,sDAQTC,EAAU,mCAAG,WAAMF,GAAN,uFACDT,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,EAD3B,2BADC,cAClBG,EADkB,yBAKjBA,EAASC,KAAKG,SALG,2CAAH,qD,2GCvCR,SAASO,EAAT,GAAqC,IAAZC,EAAW,EAAXA,QACtC,OACE,wBACGA,EAAQC,OAAS,EAChBD,EAAQE,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACV,2BACE,wBAAKA,KACL,uBAAID,MAFGT,EADC,KAOZ,yEAIP,C,aCXc,SAASW,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAUR,OARAa,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAWF,GACRc,MAAK,SAAAC,GACJJ,EAAWI,EACZ,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACjB,KAEG,oCAAII,IAAW,SAACD,EAAD,CAAeC,QAASA,IAAvC,MACR,C","sources":["Services/serviceAPI.js","components/ReviewsMarkup.jsx","pages/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '96c6c10d81401dc0172065706a628eea';\n\nexport const getTrendingMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieBySearch = async query => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&&query=${query}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getDetailsById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getActors = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data.results;\n};\n","import PropTypes from 'prop-types';\n\nexport default function ReviewsMarkup({ reviews }) {\n  return (\n    <ul>\n      {reviews.length > 0 ? (\n        reviews.map(({ id, content, author }) => (\n          <li key={id}>\n            <h3>{author}</h3>\n            <p>{content}</p>\n          </li>\n        ))\n      ) : (\n        <h2>We don't have any reviews for this movie...</h2>\n      )}\n    </ul>\n  );\n}\n\nReviewsMarkup.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ReviewsMarkup from '../components/ReviewsMarkup';\nimport { getReviews } from '../Services/serviceAPI';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getReviews(movieId)\n      .then(result => {\n        setReviews(result);\n      })\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return <> {reviews && <ReviewsMarkup reviews={reviews} />} </>;\n}\n"],"names":["BASE_URL","API_KEY","getTrendingMovie","axios","response","data","getMovieBySearch","query","results","getDetailsById","id","getActors","movieId","cast","getReviews","ReviewsMarkup","reviews","length","map","content","author","Reviews","useState","setReviews","useParams","useEffect","then","result","catch","error","console","log"],"sourceRoot":""}